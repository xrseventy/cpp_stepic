//
// Created by alfa on 11.04.2020.
//
//Напишите функцию min(a, b), вычисляющую
// минимум двух чисел. Затем напишите
// функцию min4(a, b, c, d), вычисляющую
// минимум 4 чисел с помощью функции min.
// Считайте четыре целых числа и выведите их минимум.
#include <iostream>
using namespace std;
int min (int a, int b)
{
	return (a < b ? a : b);
}
int main() {
	int a, b, c, d, one, two;
	cin >> a >> b >> c >> d;
	one = min(a, b);
	two = min(c, d);
	cout << min(one, two);
	return 0;
}

//
#include <iostream>
#include <cmath>
using namespace std;
double distance (double a, double b, double c, double d)
{
	double f;
	f = sqrt((a - c)*(a - c) + (b - d)*(b - d));
	return f;
}
int main() {
	double a, b, c, d;
	cin >> a >> b >> c >> d;

	cout << distance(a, b, c, d);
	return 0;
}

//Даны два действительных числа x и y. Проверьте, принадлежит ли
// точка с координатами (x, y) заштрихованному квадрату
// (включая его границу).
// Если точка принадлежит квадрату, выведите слово YES,
// иначе выведите слово NO. На рисунке сетка проведена с шагом 1.

//Решение должно содержать функцию IsPointInSquare(x, y),
// возвращающую true, если точка принадлежит квадрату и false,
// если не принадлежит. Основная программа должна считать
// координаты точки, вызвать функцию IsPointInSquare
// и в зависимости от возвращенного значения вывести
// на экран необходимое сообщение.
//
//Функция IsPointInSquare не должна содержать инструкцию if.
#include <iostream>
#include <cmath>
using namespace std;
double  IsPointInSquare( double x,  double y)
{
	return abs(x) <= 1 and abs(y) <= 1; //функция возращает модуль числа

}
int main() {
	double x, y;
	cin >> x >> y;
	IsPointInSquare(x, y) ? cout << "YES" : cout << "NO";
	return 0;
}
// Ромб
// Даны два действительных числа x и y. Проверьте,
// принадлежит ли точка с координатами (x, y) заштрихованному
// квадрату (включая его границу). Если точка принадлежит
// квадрату, выведите слово YES, иначе выведите слово NO.
// На рисунке сетка проведена с шагом 1.

//Решение должно содержать функцию IsPointInSquare(x, y),
// возвращающую True, если точка принадлежит квадрату и False,
// если не принадлежит. Основная программа должна считать
// координаты точки, вызвать функцию IsPointInSquare и
// в зависимости от возвращенного значения вывести на
// экран необходимое сообщение.

//Функция IsPointInSquare не должна содержать инструкцию if.
#include <iostream>
#include <cmath>
using namespace std;
double  IsPointInSquare( double x,  double y)
{
	return (abs(x) + abs(y)) <= 1;

}
int main() {
	double x, y;
	cin >> x >> y;
	IsPointInSquare(x, y) ? cout << "YES" : cout << "NO";
	return 0;
}



//Даны пять действительных чисел: x, y, xc, yc, r. Проверьте,
// принадлежит ли точка (x, y) кругу с центром (xc, yc) и радиусом r.
// Если точка принадлежит кругу, выведите слово YES, иначе выведите
// слово NO.
//Решение должно содержать функцию IsPointInCircle(x, y, xc, yc, r),
// возвращающую True, если точка принадлежит кругу и False,
// если не принадлежит. Основная программа должна считать
// координаты точки, вызвать функцию IsPointInCircle
// и в зависимости от возвращенного значения вывести на экран необходимое сообщение.
//Функция IsPointInCircle не должна содержать инструкцию if.
#include <iostream>
#include <cmath>
using namespace std;
bool  IsPointInCircle( double x,  double y, double xc, double yc, double r)
{

	return ((pow((x - xc), 2)) + (pow((y - yc), 2)) <= pow(r, 2)); //формула уравнение окружности

}
int main() {
	double x, y, xc, yc, r;
	cin >> x >> y >> xc >> yc >> r;
	IsPointInCircle(x, y, xc, yc, r) ? cout << "YES" : cout << "NO";
	return 0;
}


//писание картинки для тех кто не может её увидеть: На рисунке изображены окружность радиусом  2
// и с центром в точке с координатами (-1,1) и две прямые.Одна прямая проходит через точки с
// координатами (-1,0) и (0,2) и пересекает окружность. Вторая прямая проход через точки с координатами
// (0,0) и (-1,1), то есть она проходит через центр окружности и наклонена под 45 градусов к
// отрицательному направлению оси Х! Точка пересечения прямых лежит внутри окружности.
//
//Теперь описание двух заштрихованных областей, образованных пересеченим
// перечисленных ранее окружностью и двумя прямыми. Первая заштрихованная
// область заключена внутри окружности и ограничена снизу двумя пересекающимися
// прямыми. Другими словами, эта область ограничена сверху окружностью
// а снизу двумя прямыми. Вторая заштрихованная область находится ниже окружности,
// по бокам ограничена двумя прямыми и простирается вниз до безконечности.
// Другими словами, это область лежащая под пересекающимися прямыми и под окружностью,
// но точка пересечения самих прямых в неё не попадает, потому что она отсекается нижней дугой окружности.

#include <iostream>
#include <cmath>
using namespace std;

int   IsPointInArea( double xa,  double ya)
{

	return(((ya >= -xa) && (ya >= 2 * (xa + 1)) && (pow((xa + 1), 2) + pow((ya - 1), 2) <= 4))
		   || ((ya <= -xa) && (ya <= 2 * (xa + 1)) && (pow((xa + 1), 2) + pow((ya - 1), 2)) >= 4)) ;


}
int main() {
	double x, y;
	cin >> x >> y;
	IsPointInArea(x, y) ? cout << "YES" : cout << "NO";
	return 0;
}

//Все становится просто, если правильно сформулировать задачу. И все тесты проходятся сразу.
//Принадлежит ли точка A(xa,ya) одной из двух областей, ограниченных окружностью и двумя прямыми?

//1. Уравнения прямой y=kx+b; По клеточкам определяем, что уравнение прямой под 45 градусов: y1 = -x; второй: y2 = 2x+2.
//2. Уравнение окружности, учитывая, что координаты центра и радиус соответственно (-1,1) и 2: (x+1)^2 + (y-1)^2 = 4

//3. Формулируем условие принадлежности областям:
//3.1. Область в 1-2 четвертях. Лежит в пределах (внутри) окружности и над (выше) обеими прямыми, включая значения на них.
//3.2. Аналогично для области, лежащей в 3-4 четверти. Точка будет принадлежать области, если лежит вне окружности и под (ниже) обеими прямыми, включая значения на них.
// 27

//Если остались непонятные моменты:
//3.1. Подставим в уравнение окружности (xa,ya); принадлежащие области значения будут меньше или равны радиусу
//(xа+1)^2 + (yа-1)^2 <= 4 - первое условие
//Аналогично подставим xa в уравнения прямых, изменив равенство на больше или равно, и проверим удовлетворяет ya неравенству, если удовлетворяет - находится в области, не удовлетворяет - не лежит: ya >= -xa и ya >= 2a+2 - вторые условия.
//3.2. Аналогично для второй области подставим и получим:
//(xа+1)^2 + (yа-1)^2 >= 4
//ya <= -xa
//ya <= 2a+2
//Проверка на принадлежность одной из двух областей, т.е. условие или

//Дано натуральное число n > 1.
// Выведите его наименьший делитель, отличный от 1.
//Решение оформите в виде функции MinDivisor(n).
// Количество операций в программе должно быть
// пропорционально корню из n.
//Указание. Если у числа n нет делителя, меньшего n ,
// то число n — простое и ответом будет само число n.
#include <iostream>
#include <cmath>
using namespace std;
int MinDivisor(int n)
{

	int nod;
	// cout << "sqrt(n)" << sqrt(n) << "\n";
	for (int i = 2, isqrt = sqrt(n); i <= isqrt; i++)
	{
		// cout << "i=" << i << "\n";
		if(n % i == 0)
		{
			nod = i;
			return(nod);
		}
	}
	if (n / n == 1 && n / 1 == n)
		return(n);

	return (nod);
}
int main() {
	int n;
	cin >> n;
	cout << MinDivisor(n);
	return 0;
}

//Дано натуральное число n > 1.
// Проверьте, является ли оно простым.
// Программа должна вывести слово
// YES, если число простое и NO, если число составное.
//Решение оформите в виде функции IsPrime(n),
// которая возвращает True для простых чисел
// и False для составных чисел. Количество
// операций в программе должно быть п
// ропорционально корню из n.
#include <iostream>
#include <cmath>
using namespace std;
bool IsPrime(int n)
{
	bool check = true;

	for (int i = 2, isqrt = sqrt(n); i <= isqrt; i++)
	{

		if(n % i == 0)
		{
			check = false;
			return(check);
		}
	}
	return(check);
}


int main() {
	double n;
	cin >>  n;
	IsPrime(n) ? cout << "YES": cout << "NO";
	return 0;
}